import 'dart:io';import 'package:ar_hardware/viewModel/product_viewmodel.dart';import 'package:auto_size_text/auto_size_text.dart';import 'package:flutter/material.dart';import 'package:flutter_colorpicker/flutter_colorpicker.dart';import 'package:get/get.dart';import 'package:image_picker/image_picker.dart';import 'package:permission_handler/permission_handler.dart';import '../../utils/utils.dart';import '../../widgets/appBar.dart';class TakePictures extends StatefulWidget {  const TakePictures({super.key});  @override  State<TakePictures> createState() => _TakePicturesState();}class _TakePicturesState extends State<TakePictures> {  final Rx<File?> _selectedImage = Rx<File?>(null);  Rx<Color> pickerColor = Rx<Color>(const Color(0xffffffff));  Rx<Color> currentColor = Rx<Color>(const Color(0xffffffff));  List<int> colorCodes = [];  final picker = ImagePicker();  ProductViewModel productViewModel = Get.put(ProductViewModel());  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: const AppBarWidget(text: "Take Picture"),      body: SingleChildScrollView(        child: Padding(          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),          child: Column(            children: [              Row(                mainAxisAlignment: MainAxisAlignment.spaceBetween,                children: [                  Expanded(                    child: InkWell(                      onTap: () async {                        Map<Permission, PermissionStatus> statuses = await [                          Permission.camera,                        ].request();                        if (statuses[Permission.camera]!.isGranted) {                          _pickImageFromCamera();                        } else {                          await Utils.snackBar(                              "No Permission Provided", context);                        }                      },                      child: Card(                        elevation: 5,                        margin: EdgeInsets.zero,                        child: Padding(                          padding: const EdgeInsets.all(16),                          child: Column(                            mainAxisAlignment: MainAxisAlignment.center,                            children: [                              const Icon(Icons.camera, size: 34),                              SizedBox(height: Get.height * 0.01),                              const AutoSizeText(                                "Take Picture",                                style: TextStyle(                                  fontSize: 16,                                  fontWeight: FontWeight.w700,                                ),                              ),                            ],                          ),                        ),                      ),                    ),                  ),                ],              ),              SizedBox(height: Get.height * 0.025),              Obx(                () {                  return _selectedImage.value != null                      ? Column(                          children: [                            Container(                              width: double.infinity,                              height: Get.height * 0.54,                              decoration: const BoxDecoration(),                              clipBehavior: Clip.hardEdge,                              child: FutureBuilder<Size>(                                future: _getImageSize(_selectedImage.value!),                                builder: (context, snapshot) {                                  if (snapshot.hasData) {                                    return AspectRatio(                                      aspectRatio: snapshot.data!.width /                                          snapshot.data!.height,                                      child: Image.file(                                        _selectedImage.value!,                                        fit: BoxFit.contain,                                      ),                                    );                                  } else {                                    return const Center(                                      child: CircularProgressIndicator(),                                    );                                  }                                },                              ),                            ),                            SizedBox(height: Get.height * 0.022),                            ElevatedButton(                              style: ElevatedButton.styleFrom(                                minimumSize: const Size.fromHeight(50),                              ),                              onPressed: () {                                showColors();                              },                              child: const AutoSizeText(                                "Pick Color",                                textAlign: TextAlign.center,                                style: TextStyle(                                  fontWeight: FontWeight.bold,                                  fontSize: 18,                                ),                              ),                            ),                            SizedBox(height: Get.height * 0.016),                            FilledButton(                              style: ElevatedButton.styleFrom(                                minimumSize: const Size.fromHeight(50),                              ),                              onPressed: () {                                if (colorCodes.isNotEmpty) {                                  productViewModel.uploadProductAPI(                                      File(_selectedImage.value!.path),                                      context,                                      colorCodes);                                } else {                                  Utils.snackBar("Please Pick Color", context);                                }                              },                              child: const AutoSizeText(                                "Paint Wall",                                textAlign: TextAlign.center,                                style: TextStyle(                                  fontWeight: FontWeight.bold,                                  fontSize: 18,                                ),                              ),                            ),                          ],                        )                      : const AutoSizeText(                          "Please Select an Image",                          style: TextStyle(                              fontSize: 14, fontWeight: FontWeight.bold),                        );                },              )            ],          ),        ),      ),    );  }  _pickImageFromCamera() async {    await picker.pickImage(source: ImageSource.camera).then((value) {      if (value != null) {        _selectedImage.value = File(value.path);      }    });  }  Future<Size> _getImageSize(File imageFile) async {    final image = await decodeImageFromList(await imageFile.readAsBytes());    return Size(image.width.toDouble(), image.height.toDouble());  }  void changeColor(Color color) {    pickerColor(color);  }  Future showColors() {    return showDialog(      barrierDismissible: false,      context: context,      builder: (context) => AlertDialog(        content: SingleChildScrollView(          child: ColorPicker(            pickerColor: pickerColor.value,            onColorChanged: changeColor,          ),        ),        actions: <Widget>[          FilledButton(            child: const Text('Got it'),            onPressed: () {              currentColor.value = pickerColor.value;              colorCodes.add(currentColor.value.red);              colorCodes.add(currentColor.value.green);              colorCodes.add(currentColor.value.blue);              Get.back();            },          ),        ],      ),    );  }}